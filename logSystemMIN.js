"use strict";var LogType,consoleColors,__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.commands=exports.logSystemError=exports.blankCallback=exports.newConsole=exports.console=exports.consoleColors=exports.formatError=exports.LogType=void 0,exports.log=log,exports.clearConsole=clearConsole,exports.consoleWrite=consoleWrite,exports.assertConsole=assertConsole,exports.blockLogs=blockLogs,exports.registerCommand=registerCommand,exports.removeCommand=removeCommand,exports.commandList=commandList,exports.isCommandRegistered=isCommandRegistered,exports.counterCount=counterCount,exports.counterCountReset=counterCountReset;const node_fs_1=require("node:fs"),node_os_1=__importDefault(require("node:os")),node_path_1=require("node:path"),node_process_1=require("node:process"),LOGDIRECTORY=(0,node_path_1.join)("dev","logs"),LATESTLOGNAME="latest.txt",getMoreStartInformation=()=>{let e=new Date;return`----------------
LOGS FROM ${e.toISOString()} UTC TIME ${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}
`},saveTheLatest=(e,o)=>{(0,node_fs_1.renameSync)(o,(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,`${e.getFullYear()}.${e.getMonth()}.${e.getDate()} ${e.getHours()}.${e.getMinutes()}.${e.getSeconds()}.txt`))};let viewTextBox=!0,blockLogsVar=!1;!function(e){e[e.INFO=0]="INFO",e[e.INFORMATION=0]="INFORMATION",e[e.ERROR=1]="ERROR",e[e.ERR=1]="ERR",e[e.WARNING=2]="WARNING",e[e.WAR=2]="WAR",e[e.SUCCESS=3]="SUCCESS",e[e.SUCC=3]="SUCC",e[e.SUC=3]="SUC",e[e.INITIALIZATION=4]="INITIALIZATION",e[e.INIT=4]="INIT",e[e.INT=4]="INT",e[e.CRASH=5]="CRASH",e[e.COUNTER=6]="COUNTER"}(LogType||(exports.LogType=LogType={}));class logSystemError extends Error{}exports.logSystemError=logSystemError,process.stdin.setRawMode(!0),process.stdin.resume(),process.stdin.setEncoding("utf-8"),(0,node_fs_1.existsSync)((0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY))||(0,node_fs_1.mkdirSync)((0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY),{recursive:!0});const finalLatest=(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,"latest.txt"),tempFinal=(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,"temp");if((0,node_fs_1.existsSync)(finalLatest)){if(!(0,node_fs_1.existsSync)(tempFinal))throw new logSystemError("Error with moving the previous log!");let e=(0,node_fs_1.readFileSync)(tempFinal).toString(),o=e.split("\n"),t=new Date(Number(String(o[0])));saveTheLatest(t,finalLatest),(0,node_fs_1.unlinkSync)(tempFinal)}(0,node_fs_1.writeFileSync)(tempFinal,`${Date.now()}
`),(0,node_fs_1.writeFileSync)(finalLatest,getMoreStartInformation()),(0,node_fs_1.appendFileSync)(finalLatest,"----------------\n");let text="";const allowedKeysToWrite="abcdefghijklmnopqrstuxwvyzABCDEFGHIJKLMNOPQRSTUXWVYZ1234567890!@#$%^*()`~-_+\\|'\";:,<.>?[{}] ";viewTextBox&&process.stdout.write("> \x1b[35m"+text),process.stdin.on("data",async e=>{if(e){if("\x03"===e&&(process.stdout.write("\x1b[0m"),viewTextBox=!1,log(LogType.CRASH,"The execution was manually stopped by CTRL + C!"),process.exit()),viewTextBox||(viewTextBox=!0,process.stdout.write("\x1b[0m> \x1b[35m")),e.includes("\b"))text.length>0&&process.stdout.write("\b \b"),text=text.slice(0,-1);else if(e.includes("\r")){process.stdout.write("\n"),(0,node_fs_1.appendFileSync)(finalLatest,"> "+text+"\n");let o=text;text="",process.stdout.write("\x1b[0m"),handleEnter(o)}else"abcdefghijklmnopqrstuxwvyzABCDEFGHIJKLMNOPQRSTUXWVYZ1234567890!@#$%^*()`~-_+\\|'\";:,<.>?[{}] ".includes(e)&&(text+=e,process.stdout.write(e))}});const blankCallback=e=>!1;exports.blankCallback=e=>!1;let commands={exit:[e=>!1,"exit <exit code>","allows you to stop the process","allows you to stop the process"],info:[e=>!1,"info","shows the information about the process","shows the information about the process"],cls:[e=>!1,"cls","clears the console","clears the console"],hide:[e=>!1,"hide","hides the textbox","hides the textbox"]};function isCommandRegistered(e){return Object.hasOwn(commands,e)}function commandList(){return Object.keys(commands)}function removeCommand(e){if(!Object.hasOwn(commands,e))throw new logSystemError(`The command '${e}' doesn't exist!`);delete commands[e]}function registerCommand(e,o,t,n,s){if(Object.hasOwn(commands,e))throw new logSystemError(`The command '${e}' does exist!`);commands[e]=[s,o,t,n]}exports.commands=commands;const commandInterface={isCommandRegistered,commandList,removeCommand,registerCommand};function handleEnter(e){log(LogType.INFO,`This command has been executed ${e}`,"console");let o=e.split(" ");switch(o[0]){case"?":case"help":let t="";for(let n of newConsole.commandInterface.commandList())t+=` * ${n} -> ${commands[n][2]}
`;consoleWrite(`------
Commands:

`+t+"\n");break;case"exit":{let s=""!==o.slice(1).join(" ").trim()?o.slice(1).join(" ").trim():0;return log(LogType.CRASH,"The execution was manually stopped by EXIT COMMAND with code: "+s),process.stdout.write("\x1b[0m"),process.exit(s),!1}case"cls":case"clear":return clearConsole(),!0;case"h":case"hide":return consoleWrite("The textbox was hidden. Start writting to make it appear again!\n"),textboxVisibility(!1),!1;case"info":{let r=process.memoryUsage();consoleWrite(`------
process info:

	architecture: ${node_os_1.default.arch}
	host name: ${node_os_1.default.hostname}
	platform: ${node_os_1.default.platform}
	kernel version: ${node_os_1.default.version}
	process priority: ${node_os_1.default.getPriority()}
	machine: ${node_os_1.default.machine}
	cwd: ${process.cwd()}
	heap total: ${Math.round(r.heapTotal/1e5)/10}mb
	heap used: ${Math.round(r.heapUsed/1e5)/10}mb
	cpu usage (1m, 5m, 15m): ${node_os_1.default.loadavg().map(e=>`${100*e}%`)}
`);break}default:if(Object.hasOwn(commands,o[0]))return commands[o[0]][0](o);return log(LogType.ERROR,"unknown command","console"),!0}}function log(e,o,t="core"){let n=new Date,s=`${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}:${n.getMilliseconds()}`,r;switch(e){case LogType.INFO:r=`${s} INFO ${t}: ${o}
`;break;case LogType.ERROR:r=`${s} ERROR ${t}: ${o}
`;break;case LogType.SUCCESS:r=`${s} SUCCESS ${t}: ${o}
`;break;case LogType.INIT:r=`${s} INIT ${t}: ${o}
`;break;case LogType.WARNING:r=`${s} WARNING ${t}: ${o}
`;break;case LogType.CRASH:r=`${s} CRASH ${t}: ${o}
`;break;case LogType.COUNTER:r=`${s} COUNTER ${t}: ${o}
`;break;default:throw new logSystemError("???")}(0,node_fs_1.appendFileSync)(finalLatest,r),!blockLogsVar&&(process.stdout.clearLine(0),process.stdout.write("\r\x1b[0m"),process.stdout.write(r),viewTextBox&&process.stdout.write("> \x1b[35m"+text))}const formatError=e=>"object"==typeof e&&Object.hasOwn(e,"stack")?e.stack:e;function assertConsole(e,o,t="core"){e||log(LogType.ERROR,o,t)}function clearConsole(){process.stdout.cursorTo(0,0),process.stdout.clearScreenDown(),viewTextBox&&process.stdout.write("\x1b[0m> \x1b[35m"+text)}exports.formatError=formatError;const counterTable={};function counterCount(e,o=1,t=1,n){return Object.hasOwn(counterTable,e)?counterTable[e]+=t:counterTable[e]=o,log(LogType.COUNTER,`${e} -> ${counterTable[e]}`,n),counterTable[e]}function counterCountReset(e){Object.hasOwn(counterTable,e)&&delete counterTable[e]}function getCounter(e){return counterTable[e]?counterTable[e]:void 0}function consoleWrite(e,o=consoleColors.Reset,t=!0){viewTextBox&&(process.stdout.clearLine(0),process.stdout.write("\r")),process.stdout.write(o+e+"\x1b[0m"),t&&(0,node_fs_1.appendFileSync)(finalLatest,e),viewTextBox&&process.stdout.write("\x1b[0m> \x1b[35m"+text)}function blockLogs(e){return"boolean"==typeof e&&(blockLogsVar=e),blockLogsVar}function textboxVisibility(e){return"boolean"==typeof e&&(viewTextBox=e),!1===e?(process.stdout.clearLine(0),process.stdout.write("\r")):process.stdout.write("\x1b[0m> \x1b[35m"+text),viewTextBox}!function(e){e.Reset="\x1b[0m",e.Bright="\x1b[1m",e.Dim="\x1b[2m",e.Underscore="\x1b[4m",e.Blink="\x1b[5m",e.Reverse="\x1b[7m",e.Hidden="\x1b[8m",e.FgBlack="\x1b[30m",e.FgRed="\x1b[31m",e.FgGreen="\x1b[32m",e.FgYellow="\x1b[33m",e.FgBlue="\x1b[34m",e.FgMagenta="\x1b[35m",e.FgCyan="\x1b[36m",e.FgWhite="\x1b[37m",e.FgGray="\x1b[90m",e.BgBlack="\x1b[40m",e.BgRed="\x1b[41m",e.BgGreen="\x1b[42m",e.BgYellow="\x1b[43m",e.BgBlue="\x1b[44m",e.BgMagenta="\x1b[45m",e.BgCyan="\x1b[46m",e.BgWhite="\x1b[47m",e.BgGray="\x1b[100m"}(consoleColors||(exports.consoleColors=consoleColors={}));const newConsole={log:(...e)=>log(LogType.INFO,e.join(" ")),debug:(...e)=>log(LogType.INFO,e.join(" ")),formatError,commandInterface,commands:commandInterface,LogType,logThis:log,print:log,write:consoleWrite,writeRaw:consoleWrite,info:(e,o="core")=>log(LogType.INFO,e,o),error:(e,o="core")=>log(LogType.ERROR,e,o),crash:(e,o="core")=>log(LogType.CRASH,e,o),warn:(e,o="core")=>log(LogType.WARNING,e,o),warning:(e,o="core")=>log(LogType.WARNING,e,o),init:(e,o="core")=>log(LogType.INIT,e,o),success:(e,o="core")=>log(LogType.SUCCESS,e,o),assert:assertConsole,clear:clearConsole,counters:counterTable,count:counterCount,countReset:counterCountReset,getCounter,colors:consoleColors,blockLogs,textboxVisibility};exports.console=newConsole,exports.newConsole=newConsole;