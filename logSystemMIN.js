"use strict";var LogType,consoleColors,__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.multiDisplayer=exports.logNode=exports.commands=exports.logSystemError=exports.blankCallback=exports.newConsole=exports.console=exports.consoleColors=exports.formatError=exports.LogType=void 0,exports.log=log,exports.clearConsole=clearConsole,exports.consoleWrite=consoleWrite,exports.assertConsole=assertConsole,exports.blockLogs=blockLogs,exports.registerCommand=registerCommand,exports.removeCommand=removeCommand,exports.commandList=commandList,exports.isCommandRegistered=isCommandRegistered,exports.counterCount=counterCount,exports.counterCountReset=counterCountReset,exports.useWith=useWith,exports.uw=useWith,exports.fte=formatTaskError,exports.formatTaskError=formatTaskError,exports.actualCrash=actualCrash,exports.globalEval=globalEval,exports.replaceConsole=replaceConsole,exports.keepProcessAlive=keepProcessAlive,exports.showCursor=showCursor,exports.hideCursor=hideCursor,exports.consoleMultiWrite=consoleMultiWrite,exports.getCurrentVersionOfLogSystem=getCurrentVersionOfLogSystem;const node_child_process_1=require("node:child_process"),node_fs_1=require("node:fs"),node_os_1=__importDefault(require("node:os")),node_path_1=require("node:path"),node_process_1=require("node:process"),LOGDIRECTORY=(0,node_path_1.join)("dev","logs"),LATESTLOGNAME="latest.txt";let getversionInfoData=()=>"";const getMoreStartInformation=()=>{let e=new Date;return`----------------
LOGS FROM ${e.toISOString()} UTC TIME ${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}
`},saveTheLatest=(e,o)=>{(0,node_fs_1.renameSync)(o,(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,`${e.getFullYear()}.${e.getMonth()}.${e.getDate()} ${e.getHours()}.${e.getMinutes()}.${e.getSeconds()}.txt`))};let viewTextBox=!0,blockLogsVar=!1;!function(e){e[e.INFO=0]="INFO",e[e.INFORMATION=0]="INFORMATION",e[e.ERROR=1]="ERROR",e[e.ERR=1]="ERR",e[e.WARNING=2]="WARNING",e[e.WAR=2]="WAR",e[e.SUCCESS=3]="SUCCESS",e[e.SUCC=3]="SUCC",e[e.SUC=3]="SUC",e[e.INITIALIZATION=4]="INITIALIZATION",e[e.INIT=4]="INIT",e[e.INT=4]="INT",e[e.CRASH=5]="CRASH",e[e.COUNTER=6]="COUNTER"}(LogType||(exports.LogType=LogType={}));let commandHistory=[],indexCommandHistory=null;const logSystemVer="1.11",currentUpTime=Date.now();class logSystemError extends Error{}exports.logSystemError=logSystemError,process.stdin.setRawMode(!0),process.stdin.resume(),process.stdin.setEncoding("utf-8"),(0,node_fs_1.existsSync)((0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY))||(0,node_fs_1.mkdirSync)((0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY),{recursive:!0});const finalLatest=(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,"latest.txt"),tempFinal=(0,node_path_1.join)((0,node_process_1.cwd)(),LOGDIRECTORY,"temp");if((0,node_fs_1.existsSync)(finalLatest)){if(!(0,node_fs_1.existsSync)(tempFinal))throw new logSystemError("Error with moving the previous log!");let e=(0,node_fs_1.readFileSync)(tempFinal).toString(),o=e.split("\n"),s=new Date(Number(String(o[0])));saveTheLatest(s,finalLatest),(0,node_fs_1.unlinkSync)(tempFinal)}(0,node_fs_1.writeFileSync)(tempFinal,`${Date.now()}
`),(0,node_fs_1.writeFileSync)(finalLatest,getMoreStartInformation()),(0,node_fs_1.appendFileSync)(finalLatest,"----------------\n");let text="",relativePos=0;const allowedKeysToWrite="abcdefghijklmnopqrstuxwvyzABCDEFGHIJKLMNOPQRSTUXWVYZ1234567890!@#$%^*()`~-_+\\|'\";:,<.>?[{}] !@#$%^&*=~`'";function hideCursor(){process.stdout.write("\x1b[?25l")}function showCursor(){process.stdout.write("\x1b[?25h")}viewTextBox&&process.stdout.write("> \x1b[35m"+text),process.stdin.on("data",async e=>{if(e){if("\x03"===e&&(process.stdout.write("\x1b[0m"),textboxVisibility(!1),actualCrash("The execution was manually stopped by CTRL + C!","core",-1)),viewTextBox||(viewTextBox=!0,process.stdout.write("\x1b[0m> \x1b[35m")),e.includes("\b")){if(0!==relativePos){if(-1*relativePos>=text.length)return;text=text.slice(0,text.length+relativePos-1)+text.slice(text.length+relativePos,text.length),hideCursor(),process.stdout.clearLine(0),process.stdout.write("\r"),printViewTextbox(),process.stdout.moveCursor(relativePos,0),showCursor();return}text.length>0&&process.stdout.write("\b \b"),text=text.slice(0,-1)}else if(e.includes("\r")){relativePos=0,indexCommandHistory=null,process.stdout.write("\n"),(0,node_fs_1.appendFileSync)(finalLatest,"> "+text+"\n");let o=text;text="",process.stdout.write("\x1b[0m"),handleEnter(o)}else if("\x1b[A"==e)relativePos=0,null===indexCommandHistory?indexCommandHistory=commandHistory.length-1:--indexCommandHistory<0&&(indexCommandHistory=0),text=commandHistory[indexCommandHistory],hideCursor(),process.stdout.clearLine(0),process.stdout.write("\r\x1b[0m> \x1b[35m"+text),showCursor();else if("\x1b[B"==e)relativePos=0,null!==indexCommandHistory&&(++indexCommandHistory>=commandHistory.length&&(indexCommandHistory=null),text=null!==indexCommandHistory?commandHistory[indexCommandHistory]:"",hideCursor(),process.stdout.clearLine(0),process.stdout.write("\r\x1b[0m> \x1b[35m"+text),showCursor());else if("\x1b[D"===e){if(-1*relativePos>=text.length)return;process.stdout.moveCursor(-1,0),relativePos--}else if("\x1b[C"===e){if(relativePos>=0)return;process.stdout.moveCursor(1,0),relativePos++}else if("abcdefghijklmnopqrstuxwvyzABCDEFGHIJKLMNOPQRSTUXWVYZ1234567890!@#$%^*()`~-_+\\|'\";:,<.>?[{}] !@#$%^&*=~`'".includes(e)){if(0!==relativePos){text=text.slice(0,relativePos)+e+text.slice(relativePos),hideCursor(),process.stdout.write("\r"),printViewTextbox(),process.stdout.moveCursor(relativePos,0),showCursor();return}text+=e,process.stdout.write(e)}}});const blankCallback=e=>!1;exports.blankCallback=e=>!1;let commands={exit:{usageinfo:"exit <exit code...>",desc:"allows you to stop the process",longdesc:"It will execute process.exit(exitcode) that will cause the whole process to cease to exist. Your work may be lost. But sometimes it's the only easy way to close your program. If you want to safe close, consider using safeexit/sexit (though it requires setting the handler by the app before!).",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=""!==e.slice(1).join(" ").trim()?e.slice(1).join(" ").trim():0;return textboxVisibility(!1),actualCrash("The execution was manually stopped by EXIT COMMAND with code: "+o,"core",-1),!1}},crash:{isAlias:!0,aliasName:"exit",hidden:!0,changeable:!1},clear:{usageinfo:"clear",desc:"clears the whole screen",longdesc:"It clears the whole screen using clearConsole(). Aliases: cls",hidden:!1,changeable:!1,isAlias:!1,callback:e=>(clearConsole(),!0)},cls:{isAlias:!0,aliasName:"clear",hidden:!0,changeable:!1},echo:{usageinfo:"echo",desc:"allows you to print on the screen",longdesc:"It clears the whole screen using clearConsole()",hidden:!1,changeable:!1,isAlias:!1,callback:e=>(consoleWrite(e.slice(1).join(" ")+"\n",consoleColors.FgWhite),!1)},ech:{isAlias:!0,aliasName:"clear",hidden:!0,changeable:!1},hide:{usageinfo:"hide",desc:"hides the textbox that allows you to write",longdesc:"hides the textbox that is used to write. It will appear again when you start typing.",hidden:!1,changeable:!1,isAlias:!1,callback:e=>(consoleWrite("The textbox was hidden. Start writting to make it appear again!\n"),textboxVisibility(!1),!1)},h:{isAlias:!0,aliasName:"hide",hidden:!0,changeable:!1},eval:{usageinfo:"eval <code...>",desc:"allows you to execute javascript",longdesc:"it executes javascript using globalEval which means that the context is global",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=e.slice(1).join(" ").trim(),s=new logNode("eval");return newConsole.useWith("using eval",()=>{let e=globalEval(o);log(LogType.INFO,`eval returned with: ${e}`,s)},s),!1}},e:{isAlias:!0,aliasName:"eval",hidden:!0,changeable:!1},version:{usageinfo:"version",desc:"shows the version information",longdesc:"it shows the current version information",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=textboxVisibility();return textboxVisibility(!1),consoleWrite("logSystemVer: "),consoleWrite(logSystemVer,consoleColors.BgCyan),consoleWrite(" by naticzka",[consoleColors.FgMagenta,consoleColors.Blink]),consoleWrite("\n"),consoleWrite(getversionInfoData(),consoleColors.BgGray),consoleWrite("\n"),textboxVisibility(o),!1}},ver:{isAlias:!0,aliasName:"version",hidden:!0,changeable:!1},cmd:{usageinfo:"cmd <code...>",desc:"executes system commands",longdesc:"It allows you to execute system command using execSync()",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=e.slice(1).join(" ").trim(),s=new logNode("cmd");return newConsole.useWith("using cmd",()=>{let e=(0,node_child_process_1.execSync)(o);log(LogType.INFO,`cmd returned with: ${e}`,s)},s),!1}},"cmd.exe":{isAlias:!0,aliasName:"cmd",hidden:!0,changeable:!1},sys:{isAlias:!0,aliasName:"cmd",hidden:!0,changeable:!1},uptime:{usageinfo:"uptime",desc:"shows the time since the program start",longdesc:"shows the time since the program start",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=Date.now()-currentUpTime;return newConsole.log(`current uptime: ${Math.floor(o/1e3/60/60/24)}d ${Math.floor(o/1e3/60/60%24)}h ${Math.floor(o/1e3/60%60)}m ${Math.floor(o/1e3%60)}s ${o%1e3}ms (exmili: ${o})`),!1}},reload:{usageinfo:"reload",desc:"restarts the process (It doesnt work properly)",longdesc:'restarts the process (It doesnt work properly) using processRestart() (fork(join(__dirname, __filename), {stdio: "overlapped"});)',hidden:!1,changeable:!1,isAlias:!1,callback:e=>(log(LogType.INFO,"restarting the process..."),processRestart(),!1)},r:{isAlias:!0,aliasName:"reload",hidden:!0,changeable:!1},up:{isAlias:!0,aliasName:"uptime",hidden:!0},upt:{isAlias:!0,aliasName:"help",hidden:!0,changeable:!1},meow:{usageinfo:"meow <?>",desc:"meows",longdesc:"it really just meows~~",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=new multiDisplayer;return o.push("  /\\_/\\  (\n"),o.push(" ( ^.^ ) _)\n"),o.push('   \\"/  (        '),o.push("MEOW!\n",consoleColors.Blink),o.push(" ( | | )\n"),o.push("(__d b__)\n"),o.useConsoleWrite(),!1}},"meow~":{isAlias:!0,aliasName:"meow",hidden:!0,changeable:!1},"miau~":{isAlias:!0,aliasName:"meow",hidden:!0,changeable:!1},miau:{isAlias:!0,aliasName:"meow",hidden:!0,changeable:!1},info:{usageinfo:"info",desc:"prints information about the system",longdesc:"it really just prints information about the system!",hidden:!1,changeable:!1,isAlias:!1,callback(e){let o=new multiDisplayer;o.push("_______________",consoleColors.BgYellow+consoleColors.FgYellow),o.push("\n");let s=process.memoryUsage(),t=[["architecture",node_os_1.default.arch],["host name",node_os_1.default.hostname],["platform",node_os_1.default.platform],["kernel version",node_os_1.default.version],["process priority",node_os_1.default.getPriority()],["machine",node_os_1.default.machine],["cwd",process.cwd()],["heap total",Math.round(s.heapTotal/1e5)/10+"mb"],["heap used",Math.round(s.heapUsed/1e5)/10+"mb"],["cpu usage (1m, 5m, 15m)",`${node_os_1.default.loadavg().map(e=>`${100*e}%`)}`]],n=node_os_1.default.cpus(),r=0;for(let l of n)t.push([`cpu ${r}`,`${l.model} (speed: ${l.speed})`]),r++;for(let a of t)o.push("	"+a[0]+": ",consoleColors.FgGray),o.push(a[1],consoleColors.BgRed),o.push("\n");return o.push("_______________",consoleColors.BgYellow+consoleColors.FgYellow),o.push("\n"),o.useConsoleWrite(),!1}},sysinfo:{isAlias:!0,aliasName:"info",hidden:!0,changeable:!1},sysinf:{isAlias:!0,aliasName:"info",hidden:!0,changeable:!1},inf:{isAlias:!0,aliasName:"info",hidden:!0,changeable:!1},"?":{isAlias:!0,aliasName:"help",hidden:!0,changeable:!1},help:{usageinfo:"help [<about>]",desc:"shows the list of commands or describes the command usage",longdesc:"Provides the long description and command usage of provided command and if not specified shows the list of commands.",hidden:!1,changeable:!1,callback(e){if(1===e.length){let o=[],s=[];for(let[t,n]of Object.entries(commands))n.hidden||(o.push("* "),s.push(consoleColors.FgYellow),o.push(t),s.push(consoleColors.FgWhite),o.push(" -> "),s.push(consoleColors.FgMagenta),o.push(n.desc+"\n"),s.push(consoleColors.FgWhite));consoleMultiWrite(o,s)}else if(2==e.length){let r=new multiDisplayer;if(e[1]in commands){let l=commands[e[1]],a;a=l.isAlias?commands[l.aliasName]:l,r.push("_______________",consoleColors.BgYellow+consoleColors.FgYellow),r.push("\n"),r.push(" "+a.usageinfo+"\n\n",consoleColors.FgCyan),r.push("hidden: ",consoleColors.FgGray),r.push(String(a.hidden)+"\n",consoleColors.FgWhite),r.push("changable: ",consoleColors.FgGray),r.push(String(a.changeable)+"\n",consoleColors.FgWhite),r.push("short desc: ",consoleColors.FgGray),r.push(a.desc+"\n",consoleColors.FgWhite),r.push("long desc: ",consoleColors.FgGray),r.push(a.longdesc+"\n",consoleColors.FgWhite),r.push("_______________",consoleColors.BgYellow+consoleColors.FgYellow),r.push("\n")}else r.push("There's no reference to ",consoleColors.FgRed),r.push(e[1],consoleColors.FgYellow),r.push(" in any list!\n",consoleColors.FgRed);r.useConsoleWrite()}return!1}}};function isCommandRegistered(e){return Object.hasOwn(commands,e)}function commandList(){return Object.keys(commands)}function removeCommand(e){if(!Object.hasOwn(commands,e))throw new logSystemError(`The command '${e}' doesn't exist!`);delete commands[e]}function registerCommand(e,o){if(Object.hasOwn(commands,e))throw new logSystemError(`The command '${e}' does exist!`);if(!o.isAlias&&!o.callback)throw new logSystemError("The callback must be set for no alias.");if(o.isAlias){commands[e]={usageinfo:void 0,desc:void 0,longdesc:void 0,hidden:"boolean"!=typeof o.hidden||o.hidden,changeable:"boolean"!=typeof o.changeable||o.changeable,isAlias:!0,callback:void 0};return}commands[e]={usageinfo:o.usageinfo?o.usageinfo:`${e} [<arguments...>] ~(usage not specified)`,desc:o.desc?o.desc:"no description",longdesc:o.longdesc?o.longdesc:"no long description",hidden:"boolean"==typeof o.hidden&&o.hidden,changeable:"boolean"!=typeof o.changeable||o.changeable,isAlias:!1,callback:o.callback}}exports.commands=commands;const commandInterface={isCommandRegistered,commandList,removeCommand,registerCommand};function handleEnter(e){log(LogType.INFO,`This command has been executed: '${e}'`,"console"),commandHistory.length>50&&(commandHistory=commandHistory.slice(commandHistory.length-50,commandHistory.length)),commandHistory.push(e);let o=e.split(" ");if(!Object.hasOwn(commands,o[0]))return log(LogType.ERROR,"unknown command","console"),!0;try{let s=commands[o[0]];if(!s.isAlias)return s.callback(o);{let t=commands[s.aliasName];if(!t)throw new logSystemError("invalid alias");return t.callback(o)}}catch(n){return log(LogType.ERROR,"The error has occured during the command execution:\n"+formatError(n),"console"),!1}}function globalEval(e){return globalThis.eval.apply(globalThis,[e])}function resolveLogType(e){switch(e){case LogType.SUCCESS:return"SUCCESS";case LogType.ERROR:return"ERROR";case LogType.INFO:return"INFO";case LogType.WARNING:return"WARNING";case LogType.COUNTER:return"COUNTER";case LogType.INIT:return"INIT";case LogType.CRASH:return"CRASH";default:return"UNKNOWN"}}function resolveLogColor(e){switch(e){case LogType.SUCCESS:return colorTable.success;case LogType.ERROR:return colorTable.error;case LogType.INFO:return colorTable.info;case LogType.WARNING:return colorTable.warning;case LogType.COUNTER:return colorTable.counter;case LogType.INIT:return colorTable.init;case LogType.CRASH:return colorTable.crash;default:return consoleColors.Reset}}function log(e,o,s="core"){if(blockLogsVar)return;"object"==typeof s&&(s=s.toString());let t=new Date,n=`${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}:${t.getMilliseconds()}`,r=resolveLogType(e),l=resolveLogColor(e),a=`${n} ${r} ${s}: ${o}
`,i=`${colorTable.date}${n}${consoleColors.Reset} ${r} ${colorTable.who}${s}${consoleColors.Reset}: ${l}${o}${consoleColors.Reset}
`;viewTextBox&&(process.stdout.clearLine(0),process.stdout.write(consoleColors.Reset+"\r")),process.stdout.write(i),(0,node_fs_1.appendFileSync)(finalLatest,a),viewTextBox&&process.stdout.write("\r\x1b[0m> \x1b[35m"+text)}const formatError=e=>"object"==typeof e&&Object.hasOwn(e,"stack")?e.stack:e;function assertConsole(e,o,s="core"){e||log(LogType.ERROR,o,s)}function clearConsole(){process.stdout.cursorTo(0,0),process.stdout.clearScreenDown(),viewTextBox&&process.stdout.write("\x1b[0m> \x1b[35m"+text)}exports.formatError=formatError;const counterTable={};function counterCount(e,o=1,s=1,t){return Object.hasOwn(counterTable,e)?counterTable[e]+=s:counterTable[e]=o,log(LogType.COUNTER,`${e} -> ${counterTable[e]}`,t),counterTable[e]}function counterCountReset(e){Object.hasOwn(counterTable,e)&&delete counterTable[e]}function getCounter(e){return counterTable[e]?counterTable[e]:void 0}function printViewTextbox(){process.stdout.write("\x1b[0m> \x1b[35m"+text)}function consoleWrite(e,o=consoleColors.Reset,s=!0){Array.isArray(o)&&(o=o.reduce((e,o)=>e+o)),viewTextBox&&(process.stdout.clearLine(0),process.stdout.write("\r")),process.stdout.write(o+e+"\x1b[0m"),s&&(0,node_fs_1.appendFileSync)(finalLatest,e),viewTextBox&&printViewTextbox()}function consoleMultiWrite(e,o,s=!0){if(e.length!==o.length)throw new logSystemError("Text array length and colors array length dont match!");let t="",n="";for(let r in e)t+=e[r],n+=o[r]+e[r]+consoleColors.Reset;viewTextBox&&(process.stdout.clearLine(0),process.stdout.write("\r"),process.stdout.write(consoleColors.Reset)),process.stdout.write(n),s&&(0,node_fs_1.appendFileSync)(finalLatest,t),viewTextBox&&printViewTextbox()}class multiDisplayer{texts=[];colors=[];constructor(){}push(e,o){this.texts.push(e),o?this.colors.push(o):this.colors.push("")}pop(){return[this.texts.pop(),this.colors.pop()]}useConsoleWrite(e=!0,o=!0){consoleMultiWrite(this.texts,this.colors,e),o&&(this.texts=[],this.colors=[])}clear(){this.texts=[],this.colors=[]}}exports.multiDisplayer=multiDisplayer,function(e){e.Reset="\x1b[0m",e.Bright="\x1b[1m",e.Dim="\x1b[2m",e.Underscore="\x1b[4m",e.Blink="\x1b[5m",e.Reverse="\x1b[7m",e.Hidden="\x1b[8m",e.FgBlack="\x1b[30m",e.FgRed="\x1b[31m",e.FgGreen="\x1b[32m",e.FgYellow="\x1b[33m",e.FgBlue="\x1b[34m",e.FgMagenta="\x1b[35m",e.FgCyan="\x1b[36m",e.FgWhite="\x1b[37m",e.FgGray="\x1b[90m",e.BgBlack="\x1b[40m",e.BgRed="\x1b[41m",e.BgGreen="\x1b[42m",e.BgYellow="\x1b[43m",e.BgBlue="\x1b[44m",e.BgMagenta="\x1b[45m",e.BgCyan="\x1b[46m",e.BgWhite="\x1b[47m",e.BgGray="\x1b[100m"}(consoleColors||(exports.consoleColors=consoleColors={}));let colorTable={info:consoleColors.FgWhite,warning:consoleColors.FgYellow,error:consoleColors.FgRed,success:consoleColors.FgGreen,counter:consoleColors.FgCyan,init:consoleColors.FgWhite,crash:consoleColors.FgRed,date:consoleColors.FgGray,who:consoleColors.FgMagenta};function blockLogs(e){return"boolean"==typeof e&&(blockLogsVar=e),blockLogsVar}function textboxVisibility(e){return"boolean"==typeof e&&(viewTextBox=e),!1===e?(process.stdout.clearLine(0),process.stdout.write("\r")):process.stdout.write("\x1b[0m> \x1b[35m"+text),viewTextBox}function formatTaskError(e,o){return`The error with the task: '${e}'. The error message:
${formatError(o)}
`}function useWith(e,o,s="core"){log(LogType.INFO,e,s);try{o(),log(LogType.SUCCESS,e,s)}catch(t){log(LogType.ERROR,formatTaskError(e,t),s)}}class logNode{name;parent;constructor(e,o){this.name=e,this.parent}getParent(){return this.parent}toString(){let e="",o=this;for(;o;)e=o.name+"."+e,o=o.getParent();return e.slice(0,e.length-1)}}function actualCrash(e,o,s){newConsole.crash(e,o),process.exit(s)}function versionInfo(e){return void 0!==e&&(getversionInfoData=e),getversionInfoData()}function getCurrentVersionOfLogSystem(e="string"){return"string"===e?String(logSystemVer):"number"===e?Number(logSystemVer):-1}exports.logNode=logNode;const newConsole={log:(...e)=>log(LogType.INFO,e.join(" ")),debug:(...e)=>log(LogType.INFO,e.join(" ")),formatError,commandInterface,commands:commandInterface,LogType,logThis:log,print:log,write:consoleWrite,writeRaw:consoleWrite,info:(e,o="core")=>log(LogType.INFO,e,o),error:(e,o="core")=>log(LogType.ERROR,e,o),crash:(e,o="core")=>log(LogType.CRASH,e,o),warn:(e,o="core")=>log(LogType.WARNING,e,o),warning:(e,o="core")=>log(LogType.WARNING,e,o),init:(e,o="core")=>log(LogType.INIT,e,o),success:(e,o="core")=>log(LogType.SUCCESS,e,o),assert:assertConsole,clear:clearConsole,counters:counterTable,count:counterCount,countReset:counterCountReset,getCounter,colors:consoleColors,blockLogs,textboxVisibility,useWith,formatTaskError,actualCrash,ace:actualCrash,acrash:actualCrash,versionInfo,showCursor,hideCursor,getCurrentVersionOfLogSystem};function replaceConsole(){Object.assign(globalThis,{console:newConsole,orginalConsole:globalThis.console})}function keepProcessAlive(){(async()=>{for(;;)await new Promise(e=>setTimeout(e,20))})()}function processRestart(){newConsole.warn("It may not work!"),(0,node_child_process_1.fork)((0,node_path_1.join)(__dirname,__filename),{stdio:"overlapped"}),process.kill(0)}exports.console=newConsole,exports.newConsole=newConsole,process.addListener("exit",()=>{viewTextBox=!1,consoleWrite("",consoleColors.Reset,!1)}),process.addListener("uncaughtException",e=>{newConsole.crash("process uncaughtException: "+formatError(e)),process.exit(-1)}),process.addListener("message",e=>{newConsole.log("The main process has received a message: "+e)}),process.addListener("warning",e=>{newConsole.warn("process warning: "+formatError(e)),process.exit(-1)});